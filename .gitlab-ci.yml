variables:
  PROJECT: "nft-marketplace"
  CI_REGISTRY: "registry.ftech.ai"
  CI_REGISTRY_IMAGE: "registry.ftech.ai/blockchain/marketplace"

stages:
  - build-dev
  - build-prod
  - detect-secrets
  - dependency-check
  - upload-bom
  - sonarqube-check

.build_dev_template: &build_dev
  image: docker:20.10.16
  stage: build-dev
  before_script:
    - docker info
    - docker images
    - echo $REGISTRY_PUSH_USER
    - echo $REGISTRY_PUSH_PASSWORD
    - echo $CI_REGISTRY
    - docker login -u "$REGISTRY_PUSH_USER" -p "$REGISTRY_PUSH_PASSWORD" "$CI_REGISTRY"

  script:
    - export APP_VERSION=$ENV_NAME-$(date +'%Y-%m-%d_%H-%M-%S')-`[ -n "$CI_COMMIT_TAG" ] && echo $CI_COMMIT_TAG || echo $CI_COMMIT_SHORT_SHA` && echo $APP_VERSION
    - docker build -t "$CI_REGISTRY_IMAGE:$APP_VERSION" -t "$CI_REGISTRY_IMAGE"  . -f Dockerfile
    - docker push "$CI_REGISTRY_IMAGE:$APP_VERSION"
  services:
    - name: docker:20.10.16-dind
      alias: docker
  allow_failure: false
  tags: [build]

.build_prod_template: &build_prod
  image: docker:20.10.16
  stage: build-prod
  before_script:
    - docker info
    - docker images
    - echo $REGISTRY_PUSH_USER
    - echo $REGISTRY_PUSH_PASSWORD
    - echo $CI_REGISTRY
    - docker login -u "$REGISTRY_PUSH_USER" -p "$REGISTRY_PUSH_PASSWORD" "$CI_REGISTRY"

  script:
    - export APP_VERSION=$ENV_NAME-$(date +'%Y-%m-%d_%H-%M-%S')-`[ -n "$CI_COMMIT_TAG" ] && echo $CI_COMMIT_TAG || echo $CI_COMMIT_SHORT_SHA` && echo $APP_VERSION
    - docker build -t "$CI_REGISTRY_IMAGE:$APP_VERSION" -t "$CI_REGISTRY_IMAGE"  . -f Dockerfile
    - docker push "$CI_REGISTRY_IMAGE:$APP_VERSION"
  services:
    - name: docker:20.10.16-dind
      alias: docker
  allow_failure: false
  tags: [build]


build-dev:
  <<: *build_dev
  variables:
    ENV_NAME: dev
  only:
    - dev
build-prod:
  <<: *build_prod
  variables:
    ENV_NAME: prod
  only:
    - main
detect-secrets:
  stage: detect-secrets
  image:
    name: registry.ftech.ai/public/is-chart/detect-secrets:latest
  script:
    - rm -rf .git/
    - python /app/detect-secrets.py
  tags: [devsecops]
  allow_failure: true
  only:
    - devsecops
    - dev
    - develop
    - prod
    - main
    - master

dependency-check:
  stage: dependency-check
  image:
    name: aquasec/trivy
    entrypoint: [""]
  script:
    - trivy filesystem --format cyclonedx --output ./result.json --scanners vuln --ignore-unfixed -s HIGH,CRITICAL .
    - cat ./result.json > $RESULT
  artifacts:
    paths:
      - $RESULT
  tags: [devsecops]
  allow_failure: true
  only:
    - devsecops
    - dev
    - develop
    - prod
    - main
    - master

upload-bom:
  stage: upload-bom
  image:
    name: curlimages/curl
    entrypoint: [""]
  script:
    - cat result1.json
    - curl -X "POST" "https://dependency-track.dev.ftech.ai/api/v1/bom" -H "Content-Type:multipart/form-data" -H "X-Api-Key:$DEPENDENCY_TRACK_KEY" -F "autoCreate=true" -F "projectName=$CI_PROJECT_NAME" -F "description=abcd" -F "bom=@result1.json"
  tags: [devsecops]
  allow_failure: true
  only:
    - devsecops
    - dev
    - develop
    - prod
    - main
    - master

sonarqube-check:
  stage: sonarqube-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  tags: [devsecops]
  allow_failure: true
  only:
    - devsecops
    - dev
    - develop
    - prod
    - main
    - master
